[{"C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\index.tsx":"1","C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\reportWebVitals.js":"2","C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\App.tsx":"3","C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\redux\\appReducer.ts":"4","C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\hoc\\withSuspense.tsx":"5","C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\components\\Music\\Music.tsx":"6","C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\components\\Header\\AppHeader.tsx":"7","C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\components\\News\\News.tsx":"8","C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\components\\Settings\\Settings.tsx":"9","C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\components\\Dialogs\\DialogsContainer.tsx":"10","C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\components\\Profile\\ProfileContainer.tsx":"11","C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\components\\Login\\Login.tsx":"12","C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\components\\Users\\UsersPage.tsx":"13","C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\redux\\reduxStore.ts":"14","C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\components\\common\\Preloader\\Preloader.tsx":"15","C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\pages\\Chat\\ChatPage.tsx":"16","C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\redux\\authReducer.ts":"17","C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\redux\\dialogsReducer.ts":"18","C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\redux\\profileReducer.ts":"19","C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\redux\\usersSelectors.ts":"20","C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\redux\\sidebarReducer.ts":"21","C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\redux\\usersReducer.ts":"22","C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\redux\\chatReducer.ts":"23","C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\components\\Dialogs\\Dialogs.tsx":"24","C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\hoc\\withAuthRedirect.tsx":"25","C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\components\\Profile\\Profile.tsx":"26","C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\components\\Login\\LoginForm.tsx":"27","C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\components\\Users\\Users.tsx":"28","C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\API\\api.ts":"29","C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\API\\authAPI.ts":"30","C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\API\\profileAPI.ts":"31","C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\API\\chatAPI.ts":"32","C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\utils\\validators\\validators.ts":"33","C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\components\\Users\\UsersSearchForm.tsx":"34","C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\components\\Users\\User.tsx":"35","C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\components\\common\\FormsControls\\FormsControls.tsx":"36","C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\components\\Profile\\MyPosts\\MyPostsContainer.tsx":"37","C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\components\\Profile\\ProfileInfo\\ProfileInfo.tsx":"38","C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\components\\Dialogs\\Message\\MessageItem.tsx":"39","C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\components\\Dialogs\\DialogItem\\DialogItem.tsx":"40","C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\components\\Profile\\ProfileInfo\\ProfileStatusWithHooks.tsx":"41","C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\components\\Profile\\MyPosts\\MyPosts.tsx":"42","C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\API\\usersAPI.ts":"43"},{"size":509,"mtime":1622447674250,"results":"44","hashOfConfig":"45"},{"size":375,"mtime":1622093131253,"results":"46","hashOfConfig":"45"},{"size":6482,"mtime":1623136426176,"results":"47","hashOfConfig":"45"},{"size":951,"mtime":1622093131237,"results":"48","hashOfConfig":"45"},{"size":368,"mtime":1622102107652,"results":"49","hashOfConfig":"45"},{"size":161,"mtime":1622116290397,"results":"50","hashOfConfig":"45"},{"size":1849,"mtime":1622448736513,"results":"51","hashOfConfig":"45"},{"size":148,"mtime":1622114855640,"results":"52","hashOfConfig":"45"},{"size":170,"mtime":1622114326632,"results":"53","hashOfConfig":"45"},{"size":591,"mtime":1622093131159,"results":"54","hashOfConfig":"45"},{"size":1260,"mtime":1622438906569,"results":"55","hashOfConfig":"45"},{"size":877,"mtime":1622438906559,"results":"56","hashOfConfig":"45"},{"size":442,"mtime":1622438906580,"results":"57","hashOfConfig":"45"},{"size":1338,"mtime":1623216286374,"results":"58","hashOfConfig":"45"},{"size":301,"mtime":1622117047246,"results":"59","hashOfConfig":"45"},{"size":2911,"mtime":1623221442950,"results":"60","hashOfConfig":"45"},{"size":2156,"mtime":1622093131237,"results":"61","hashOfConfig":"45"},{"size":2121,"mtime":1622093131237,"results":"62","hashOfConfig":"45"},{"size":2881,"mtime":1622438906588,"results":"63","hashOfConfig":"45"},{"size":1659,"mtime":1622438906607,"results":"64","hashOfConfig":"45"},{"size":940,"mtime":1622116136056,"results":"65","hashOfConfig":"45"},{"size":4898,"mtime":1623136426331,"results":"66","hashOfConfig":"45"},{"size":2906,"mtime":1623223660611,"results":"67","hashOfConfig":"45"},{"size":2157,"mtime":1622438906556,"results":"68","hashOfConfig":"45"},{"size":920,"mtime":1622097603450,"results":"69","hashOfConfig":"45"},{"size":408,"mtime":1622438906564,"results":"70","hashOfConfig":"45"},{"size":1285,"mtime":1622438906561,"results":"71","hashOfConfig":"45"},{"size":3983,"mtime":1623136426319,"results":"72","hashOfConfig":"45"},{"size":609,"mtime":1622093131143,"results":"73","hashOfConfig":"45"},{"size":729,"mtime":1622093131143,"results":"74","hashOfConfig":"45"},{"size":1045,"mtime":1622117047313,"results":"75","hashOfConfig":"45"},{"size":2699,"mtime":1623223765192,"results":"76","hashOfConfig":"45"},{"size":396,"mtime":1622093131253,"results":"77","hashOfConfig":"45"},{"size":2269,"mtime":1623136426322,"results":"78","hashOfConfig":"45"},{"size":1511,"mtime":1623136426316,"results":"79","hashOfConfig":"45"},{"size":1662,"mtime":1622108139774,"results":"80","hashOfConfig":"45"},{"size":720,"mtime":1622112582581,"results":"81","hashOfConfig":"45"},{"size":3129,"mtime":1623136426226,"results":"82","hashOfConfig":"45"},{"size":271,"mtime":1622116827187,"results":"83","hashOfConfig":"45"},{"size":534,"mtime":1622116940338,"results":"84","hashOfConfig":"45"},{"size":1104,"mtime":1623136426236,"results":"85","hashOfConfig":"45"},{"size":3630,"mtime":1623136426181,"results":"86","hashOfConfig":"45"},{"size":710,"mtime":1622438906550,"results":"87","hashOfConfig":"45"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},"12cl094",{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"90"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"90"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"90"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"90"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"90"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"90"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"90"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"90"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"90"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"90"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},"C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\index.tsx",[],["186","187"],"C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\reportWebVitals.js",[],["188","189"],"C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\App.tsx",[],"C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\redux\\appReducer.ts",[],"C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\hoc\\withSuspense.tsx",[],"C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\components\\Music\\Music.tsx",[],"C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\components\\Header\\AppHeader.tsx",[],"C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\components\\News\\News.tsx",[],"C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\components\\Settings\\Settings.tsx",[],"C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\components\\Dialogs\\DialogsContainer.tsx",[],"C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\components\\Profile\\ProfileContainer.tsx",["190"],"import React, {useEffect} from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {useHistory, useParams} from 'react-router-dom';\r\nimport {getStatus, getUserProfile} from \"../../redux/profileReducer\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\n\r\ntype ParamsType = {\r\n    userId: string\r\n}\r\n\r\nconst ProfileContainer = () => {\r\n\r\n    const authorizedUserId = useSelector((state: AppStateType) => state.auth.userId)\r\n\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n    const newUserId = useParams<ParamsType>().userId || null\r\n\r\n    useEffect(() => {\r\n        refreshProfile()\r\n    }, [newUserId])\r\n\r\n    const refreshProfile = () => {\r\n        let userId: number | null = Number(newUserId);\r\n        if (!userId) {\r\n            userId = authorizedUserId;\r\n            if (!userId) {\r\n                history.push(\"/login\")\r\n            }\r\n        }\r\n\r\n        if (!userId) {\r\n            console.error(\"Id was a number\")\r\n        } else {\r\n            dispatch(getUserProfile(userId))\r\n            dispatch(getStatus(userId))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Profile\r\n            isOwner={!newUserId}\r\n        />\r\n    )\r\n}\r\n\r\nexport default ProfileContainer\r\n","C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\components\\Login\\Login.tsx",[],"C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\components\\Users\\UsersPage.tsx",[],"C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\redux\\reduxStore.ts",[],"C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\components\\common\\Preloader\\Preloader.tsx",[],"C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\pages\\Chat\\ChatPage.tsx",["191","192","193"],"import React, { FC, useEffect, useRef, useState } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { sendMessage, startMessagesListening, stopMessagesListening } from \"../../redux/chatReducer\"\r\nimport { AppStateType } from \"../../redux/reduxStore\"\r\nimport { ChatMessageAPIType } from \"../../API/chatAPI\"\r\n\r\n\r\nconst ChatPage: FC = () => {\r\n    return (\r\n        <div>\r\n            <Chat/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Chat: FC = () => {\r\n    const dispatch = useDispatch()\r\n    const status = useSelector((state: AppStateType) => state.chat.status)\r\n\r\n    useEffect(() => {\r\n        dispatch(startMessagesListening())\r\n        return () => {\r\n            dispatch(stopMessagesListening())\r\n        }\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div>\r\n            {status === \"error\" && <div>Error!!!</div>}\r\n            <Messages/>\r\n            <AddMessages/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatPage\r\n\r\nconst Messages: FC = () => {\r\n    const messages = useSelector((state: AppStateType) => state.chat.messages)\r\n    const messagesAnchorRef = useRef<HTMLDivElement>(null)\r\n    const [isAutoScroll, setIsAutoScroll] =  useState(true)\r\n\r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        const element = e.currentTarget\r\n        if (Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight) < 300) {\r\n            !isAutoScroll && setIsAutoScroll(true)\r\n        } else {\r\n            isAutoScroll && setIsAutoScroll(false)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isAutoScroll) {\r\n            messagesAnchorRef.current?.scrollIntoView({behavior: 'smooth'})\r\n        }\r\n    }, [messages])\r\n\r\n    return (\r\n        <div style={{ height: 400, overflowY: \"auto\" }} onScroll={scrollHandler}>\r\n            {messages.map((m, index) => <Message key={m.id} message={m}/>)}\r\n            <div ref={messagesAnchorRef}></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Message: FC<{ message: ChatMessageAPIType }> = React.memo( ({ message }) => {\r\n    return (\r\n        <div>\r\n            <img src={message.photo} style={{ width: 30 }}/> <b>{message.userName}</b>\r\n            <br/>\r\n            {message.message}\r\n            <hr/>\r\n        </div>\r\n    )\r\n})\r\n\r\nconst AddMessages: FC = () => {\r\n    const dispatch = useDispatch()\r\n    const [message, setMessage] = useState(\"\")\r\n    const status = useSelector((state: AppStateType) => state.chat.status)\r\n\r\n    const sendMessageHandler = () => {\r\n        if (!message) return\r\n        dispatch(sendMessage(message))\r\n        setMessage(\"\")\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <textarea onChange={(e) => setMessage(e.currentTarget.value)} value={message}/>\r\n            </div>\r\n            <div>\r\n                <button disabled={status !== \"ready\"} onClick={sendMessageHandler}>Send</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\redux\\authReducer.ts",[],"C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\redux\\dialogsReducer.ts",[],"C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\redux\\profileReducer.ts",["194"],"import {PhotosType, PostType, ProfileType} from \"../types/types\";\r\nimport {BaseThunkType, InferActionTypes} from \"./reduxStore\";\r\nimport {ProfileAPI} from \"../API/profileAPI\";\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: 'Hi, how are you?', likesCount: 105},\r\n        {id: 2, message: \"It's my first post\", likesCount: 10},\r\n        {id: 3, message: \"Lol\", likesCount: 5000},\r\n        {id: 4, message: \"Kek\", likesCount: 9400},\r\n    ] as Array<PostType>,\r\n    profile: null as ProfileType | null,\r\n    status: '',\r\n}\r\n\r\ntype ActionsTypes = ActionType\r\ntype profileReducerType = typeof initialState\r\n\r\nconst profileReducer = (state = initialState, action: ActionsTypes): profileReducerType => {\r\n    switch (action.type) {\r\n        case \"ADD_POST\":\r\n            return {\r\n                ...state,\r\n                posts: [{id: state.posts.length + 1, message: action.newPostText, likesCount: 0}, ...state.posts]\r\n            };\r\n        case \"SET_USER_PROFILE\":\r\n            return {...state, profile: action.profile};\r\n        case \"SET_STATUS\":\r\n            return {...state, status: action.status};\r\n        case \"DELETE_POST\":\r\n            return {...state, posts: state.posts.filter(p => p.id != action.postId)}\r\n        case \"SAVE_PHOTO_SUCCESS\":\r\n            return {...state, profile: {...state.profile, photos: action.photos} as ProfileType}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default profileReducer;\r\n\r\ntype ActionType = InferActionTypes<typeof actions>\r\n\r\nexport const actions = {\r\n    addPost: (newPostText: string) => ({type: \"ADD_POST\", newPostText} as const),\r\n    setUsersProfile: (profile: ProfileType) => ({type: \"SET_USER_PROFILE\", profile} as const),\r\n    setStatus: (status: string) => ({type: \"SET_STATUS\", status} as const),\r\n    deletePost: (postId: number) => ({type: \"DELETE_POST\", postId} as const),\r\n    savePhotoSuccess: (photos: PhotosType) => ({type: \"SAVE_PHOTO_SUCCESS\", photos} as const),\r\n}\r\n\r\n\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\n\r\nexport const getUserProfile = (userId: number): ThunkType => async (dispatch) => {\r\n    const response = await ProfileAPI.getUserProfile(userId)\r\n    dispatch(actions.setUsersProfile(response))\r\n}\r\n\r\nexport const getStatus = (userId: number): ThunkType => async (dispatch) => {\r\n    const response = await ProfileAPI.getStatus(userId)\r\n    dispatch(actions.setStatus(response))\r\n}\r\n\r\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\r\n    const response = await ProfileAPI.updateStatus(status)\r\n    if (response.resultCode !== 0) return\r\n    dispatch(actions.setStatus(status))\r\n}\r\n\r\nexport const savePhoto = (file: File): ThunkType => async (dispatch) => {\r\n    const response = await ProfileAPI.savePhoto(file)\r\n    if (response.resultCode !== 0) return\r\n\r\n    dispatch(actions.savePhotoSuccess(response.data.photos))\r\n}","C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\redux\\usersSelectors.ts",[],"C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\redux\\sidebarReducer.ts",[],"C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\redux\\usersReducer.ts",[],"C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\redux\\chatReducer.ts",[],"C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\components\\Dialogs\\Dialogs.tsx",[],"C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\hoc\\withAuthRedirect.tsx",[],"C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\components\\Profile\\Profile.tsx",[],"C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\components\\Login\\LoginForm.tsx",[],"C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\components\\Users\\Users.tsx",["195","196","197"],"import React, {CSSProperties, FC, useEffect} from 'react';\r\nimport {UserType} from \"../../types/types\";\r\nimport User from \"./User\";\r\nimport {FilterType, followUsers, requestUsers, unfollowUsers} from \"../../redux/usersReducer\"\r\nimport {UsersSearchForm} from \"./UsersSearchForm\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers,\r\n    getUsersFilter\r\n} from \"../../redux/usersSelectors\";\r\nimport {useHistory} from 'react-router-dom';\r\nimport * as queryString from \"querystring\";\r\nimport {Pagination} from \"antd\";\r\n\r\ntype PropsType = {}\r\n\r\nexport type QueryParamsType = { term?: string, page?: string, friend?: string };\r\nconst Users: React.FC<PropsType> = () => {\r\n\r\n    const totalUsersCount = useSelector(getTotalUsersCount)\r\n    const pageSize = useSelector(getPageSize)\r\n    const currentPage = useSelector(getCurrentPage)\r\n    const users = useSelector(getUsers)\r\n    const filter = useSelector(getUsersFilter)\r\n    const followingInProgress = useSelector(getFollowingInProgress)\r\n\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n\r\n    useEffect(() => {\r\n        const parsed = queryString.parse(history.location.search.substr(1)) as QueryParamsType\r\n\r\n        let actualPage = currentPage\r\n        let actualFilter = filter\r\n\r\n        if (!!parsed.page) actualPage = Number(parsed.page)\r\n        if (!!parsed.term) actualFilter = {...actualFilter, term: parsed.term as string}\r\n        if (!!parsed.friend) actualFilter = {\r\n            ...actualFilter,\r\n            friend: parsed.friend === \"null\" ? null : (parsed.friend == 'true')\r\n        }\r\n\r\n        dispatch(requestUsers(actualPage, pageSize, actualFilter))\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const query: QueryParamsType = {}\r\n\r\n        if (!!filter.term) query.term = filter.term\r\n        if (filter.friend !== null) query.friend = String(filter.friend)\r\n        if (currentPage !== 1) query.page = String(currentPage)\r\n\r\n        history.push({\r\n            pathname: \"/users\",\r\n            search: queryString.stringify(query)\r\n        })\r\n    }, [filter, currentPage])\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        if (pageNumber === currentPage) return\r\n        dispatch(requestUsers(pageNumber, pageSize, filter))\r\n    }\r\n\r\n    const onFilterChanged = (filter: FilterType) => {\r\n        dispatch(requestUsers(1, pageSize, filter))\r\n    }\r\n\r\n    const followUsersCb = (userId: number) => {\r\n        dispatch(followUsers(userId))\r\n    }\r\n\r\n    const unfollowUsersCb = (userId: number) => {\r\n        dispatch(unfollowUsers(userId))\r\n    }\r\n\r\n    const onShowSizeChange = (currentPage: number, pageSize: number) => {\r\n        dispatch(requestUsers(1, pageSize, filter));\r\n    };\r\n\r\n    const Paginator: FC<React.StyleHTMLAttributes<CSSProperties>> = (props) => (\r\n        <Pagination\r\n            style={props.style}\r\n            current={currentPage}\r\n            onShowSizeChange={onShowSizeChange}\r\n            total={totalUsersCount}\r\n            size={'small'}\r\n            pageSize={pageSize} onChange={onPageChanged}\r\n        />\r\n    )\r\n\r\n    return (\r\n        <div>\r\n            <UsersSearchForm onFilterChanged={onFilterChanged}/>\r\n            {users.length ?\r\n                <>\r\n                    <Paginator style={{marginBottom: 40, marginTop: 20}}/>\r\n                    {users.map((user: UserType) => (\r\n                        <User\r\n                            user={user} key={user.id}\r\n                            followUsers={followUsersCb}\r\n                            unfollowUsers={unfollowUsersCb}\r\n                            followingInProgress={followingInProgress}\r\n                        />\r\n                    ))}\r\n                    <Paginator style={{marginBottom: 40}}/>\r\n                </> :\r\n                <span>User undefined</span>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Users;","C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\API\\api.ts",["198"],"import axios from \"axios\";\r\nimport {UserType} from \"../types/types\";\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"90e619dd-9c4c-4644-96ed-82ca9fccd865\",\r\n    }\r\n})\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\n\r\nexport type GetItemType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n\r\nexport type ResponseType<D = {}, RC = ResultCodesEnum> = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: ResultCodesEnum\r\n}","C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\API\\authAPI.ts",[],"C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\API\\profileAPI.ts",[],"C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\API\\chatAPI.ts",[],"C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\utils\\validators\\validators.ts",[],"C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\components\\Users\\UsersSearchForm.tsx",["199"],"import {FilterType} from \"../../redux/usersReducer\";\r\nimport React, {FC} from \"react\";\r\nimport {Form, Input, Select} from 'antd';\r\nimport {useHistory} from \"react-router-dom\";\r\nimport queryString from \"querystring\";\r\nimport {QueryParamsType} from \"./Users\";\r\n\r\nconst {Option} = Select;\r\n\r\ninterface FieldData {\r\n    name: string | number | (string | number)[];\r\n    value?: any;\r\n    touched?: boolean;\r\n    validating?: boolean;\r\n    errors?: string[];\r\n}\r\n\r\ntype UsersSearchFormPropsType = {\r\n    onFilterChanged: (filter: FilterType) => void\r\n}\r\nexport const UsersSearchForm: FC<UsersSearchFormPropsType> = ({onFilterChanged}) => {\r\n\r\n    const history = useHistory()\r\n    const parsed = queryString.parse(history.location.search.substr(1)) as QueryParamsType\r\n\r\n    const handleChange: (field: Array<FieldData>, fields: Array<FieldData>) => void = (_, form) => {\r\n        const term: string = form[0].value\r\n        const friend: string = form[1].value\r\n        const filter: FilterType = {\r\n            term: term,\r\n            friend: friend === \"all\" ? null : friend == \"true\"\r\n        }\r\n        onFilterChanged(filter)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Form onFieldsChange={handleChange}>\r\n                <Input.Group compact>\r\n                    <Form.Item\r\n                        name='term'\r\n                        noStyle\r\n                        rules={[{required: true, message: 'Street is required'}]}\r\n                        initialValue={parsed.term}\r\n                    >\r\n                        <Input style={{width: '75%'}} placeholder=\"Search\"/>\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        name='friend'\r\n                        noStyle\r\n                        rules={[{required: true}]}\r\n                        initialValue={parsed.friend || 'all'}\r\n                    >\r\n                        <Select placeholder=\"All\">\r\n                            <Option value=\"all\">All</Option>\r\n                            <Option value=\"true\">Followed</Option>\r\n                            <Option value=\"false\">Unfollowed</Option>\r\n                        </Select>\r\n                    </Form.Item>\r\n                </Input.Group>\r\n            </Form>\r\n        </div>\r\n    )\r\n}","C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\components\\Users\\User.tsx",["200"],"import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {UserType} from \"../../types/types\";\r\nimport {Avatar, Button, Col, Divider, Image, Row} from \"antd\";\r\nimport {UserOutlined} from \"@ant-design/icons\";\r\n\r\nexport type UserPropsType = {\r\n    user: UserType\r\n    followingInProgress: Array<number>\r\n    unfollowUsers: (userId: number) => void\r\n    followUsers: (userId: number) => void\r\n}\r\n\r\nconst User: React.FC<UserPropsType> = ({followUsers, followingInProgress, unfollowUsers, user}) => (\r\n    <Row key={user.id}>\r\n        <Col span={3}>\r\n            <NavLink to={'/profile' + `/${user.id}`}>\r\n                {user.photos.small == null ?\r\n                    <Avatar size={80} icon={<UserOutlined/>}/> :\r\n                    <Avatar size={80} src={<Image src={user.photos.small}/>}/>\r\n                }\r\n            </NavLink>\r\n        </Col>\r\n        <Col span={17}>\r\n            <div>{user.name}</div>\r\n            <div>{user.status}</div>\r\n            <div>Country, City</div>\r\n        </Col>\r\n        <Col span={2} offset={2}>\r\n            {user.followed\r\n                ? <Button disabled={followingInProgress.some(id => id === user.id)}\r\n                          onClick={() => unfollowUsers(user.id)}>Unfollow</Button>\r\n\r\n                : <Button disabled={followingInProgress.some(id => id === user.id)}\r\n                          onClick={() => followUsers(user.id)}>Follow</Button>\r\n            }\r\n        </Col>\r\n        <Divider/>\r\n    </Row>\r\n)\r\n\r\nexport default User","C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\components\\common\\FormsControls\\FormsControls.tsx",[],"C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\components\\Profile\\MyPosts\\MyPostsContainer.tsx",[],"C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\components\\Profile\\ProfileInfo\\ProfileInfo.tsx",["201"],"import React from 'react';\r\nimport style from './ProfileInfo.module.css'\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport userPhoto from '../../../assets/images/userPhoto.jpg'\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/reduxStore\";\r\nimport {savePhoto, updateStatus} from \"../../../redux/profileReducer\";\r\nimport {Button, Col, Descriptions, Row, Upload} from \"antd\";\r\nimport {UploadOutlined} from '@ant-design/icons';\r\n\r\ntype PropsType = {\r\n    isOwner: boolean\r\n}\r\n\r\nconst ProfileInfo: React.FC<PropsType> = ({isOwner}) => {\r\n\r\n    const status = useSelector((state: AppStateType) => state.profilePage.status)\r\n    const profile = useSelector((state: AppStateType) => state.profilePage.profile)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const updateStatusCb = (status: string) => {\r\n        dispatch(updateStatus(status))\r\n    }\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const contacts = Object.entries(profile.contacts)\r\n    let valuesOfObj = Object.values(profile.contacts)\r\n    let isEveryNull = valuesOfObj.some(elem => elem != null)\r\n\r\n    const onMainPhotoSelected = (e: any) => {\r\n        dispatch(savePhoto(e.file.originFileObj))\r\n    }\r\n    //TODO update profile (edit profile)\r\n    return (\r\n        <Row>\r\n            <Col span={8}>\r\n                <img src={profile.photos.large || userPhoto} className={style.mainPhoto}/>\r\n                {isOwner && <Upload onChange={onMainPhotoSelected}>\r\n                    <Button icon={<UploadOutlined/>} style={{marginTop: 20}}>Click to Upload</Button>\r\n                </Upload>}\r\n            </Col>\r\n            <Col span={16}>\r\n                <Descriptions title=\"User Info\">\r\n                    <Descriptions.Item label=\"Name\">{profile.fullName}</Descriptions.Item>\r\n                    <Descriptions.Item label=\"Status\"><ProfileStatusWithHooks status={status} isOwner={isOwner}\r\n                                                                              updateStatus={updateStatusCb}/></Descriptions.Item>\r\n                    <Descriptions.Item label=\"About me\">{profile.aboutMe || 'None'}</Descriptions.Item>\r\n                    <Descriptions.Item\r\n                        label=\"Looking for a job\">{profile.lookingForAJob ? \"YES\" : \"NO\"}</Descriptions.Item>\r\n                    <Descriptions.Item label=\"Looking for a job description\">\r\n                        {profile.lookingForAJobDescription ? profile.lookingForAJobDescription : \"None\"}\r\n                    </Descriptions.Item>\r\n                </Descriptions>\r\n                {isEveryNull && (\r\n                    <Descriptions title=\"Contacts\" size='middle'>\r\n                        {contacts.map(([key, value]) => {\r\n                            return value != null ?\r\n                                <Descriptions.Item label={key}>{value}</Descriptions.Item> : null;\r\n                        })}\r\n                    </Descriptions>\r\n                )}\r\n            </Col>\r\n        </Row>\r\n\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\components\\Dialogs\\Message\\MessageItem.tsx",[],"C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\components\\Dialogs\\DialogItem\\DialogItem.tsx",["202"],"import React, {FC} from 'react';\r\nimport classes from './../Dialogs.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    avatar: string\r\n    name: string\r\n    id: number\r\n}\r\n\r\nconst DialogItem: FC<PropsType> = (props) => {\r\n    let path = '/dialogsElements/' + props.id;\r\n\r\n    return (\r\n        <div className={classes.dialog + ' ' + classes.active}>\r\n            <img src={props.avatar}/>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default DialogItem;","C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\components\\Profile\\ProfileInfo\\ProfileStatusWithHooks.tsx",[],"C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\components\\Profile\\MyPosts\\MyPosts.tsx",["203","204","205"],"import React, {FC, useState} from 'react';\r\nimport Post from \"./Post/Post\";\r\nimport {PostType} from \"../../../types/types\";\r\nimport {PostFormValuesType} from \"./AddNewPostForm\";\r\nimport {Avatar, Button, Comment, Form, Input, List} from 'antd';\r\nimport moment from 'moment';\r\nimport {useSelector} from \"react-redux\";\r\nimport {getUserProfile} from \"../../../redux/profileReducer\";\r\nimport {AppStateType} from \"../../../redux/reduxStore\";\r\n\r\nconst {TextArea} = Input;\r\n\r\ntype PropsType = {\r\n    addPost: (values: string) => void\r\n    posts: Array<PostType>\r\n}\r\n\r\ninterface PersonProps {\r\n    author: string\r\n    avatar: string\r\n    content: React.ReactElement\r\n    datetime: string,\r\n}\r\n\r\ntype EditorType = {\r\n    onChange: (e: { target: HTMLTextAreaElement }) => void\r\n    onSubmit: () => void\r\n    submitting: boolean\r\n    value: string\r\n}\r\n\r\ntype CommentListType = {\r\n    comments: Array<PersonProps>\r\n}\r\n\r\nconst MyPosts: React.FC<PropsType> = React.memo(({addPost, posts}) => {\r\n\r\n    // const postsElements = posts.map((p) => <Post message={p.message} likesCount={p.likesCount}\r\n    //                                              key={p.id}/>);\r\n    // const addNewPost = (values: PostFormValuesType) => {\r\n    //     addPost(values.newPost)\r\n    // };\r\n\r\n    const fullName = useSelector((state: AppStateType) => state.profilePage.profile?.fullName)\r\n    const photo = useSelector((state: AppStateType) => state.profilePage.profile?.photos.small)\r\n\r\n    const [comments, setComments] = useState<Array<PersonProps> | []>([])\r\n    const [value, setValue] = useState('')\r\n    const [submitting, setSubmitting] = useState(false)\r\n\r\n\r\n\r\n    const handleSubmit = () => {\r\n        if (!value) {\r\n            return;\r\n        }\r\n\r\n        setSubmitting(true)\r\n\r\n        setTimeout(() => {\r\n            setSubmitting(false)\r\n            setComments((prev) => [\r\n                {\r\n                    author: fullName || '',\r\n                    avatar: photo || '',\r\n                    content: <p>{value}</p>,\r\n                    datetime: moment().fromNow(),\r\n                },\r\n                ...prev,\r\n\r\n            ])\r\n        }, 1000);\r\n        setValue('')\r\n    }\r\n\r\n    const handleChange = (e: { target: HTMLTextAreaElement }) => {\r\n        setValue(e.target.value)\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Comment\r\n                avatar={\r\n                    <Avatar\r\n                        src={photo || ''}\r\n                        alt={fullName}\r\n                    />\r\n                }\r\n                content={\r\n                    <Editor\r\n                        onChange={handleChange}\r\n                        onSubmit={handleSubmit}\r\n                        submitting={submitting}\r\n                        value={value}\r\n                    />\r\n                }\r\n            />\r\n            {comments.length > 0 && <CommentList comments={comments}/>}\r\n        </>\r\n    );\r\n});\r\n\r\nexport default MyPosts;\r\n\r\nconst CommentList: FC<CommentListType> = ({comments}) => (\r\n    <List\r\n        dataSource={comments}\r\n        header={`${comments.length} ${comments.length > 1 ? 'replies' : 'reply'}`}\r\n        itemLayout=\"horizontal\"\r\n        renderItem={props => <Comment {...props} />}\r\n    />\r\n);\r\n\r\nconst Editor: FC<EditorType> = ({onChange, onSubmit, submitting, value}) => (\r\n    <>\r\n        <Form.Item>\r\n            <TextArea rows={4} onChange={onChange} value={value}/>\r\n        </Form.Item>\r\n        <Form.Item>\r\n            <Button htmlType=\"submit\" loading={submitting} onClick={onSubmit} type=\"primary\">\r\n                Add Comment\r\n            </Button>\r\n        </Form.Item>\r\n    </>\r\n);","C:\\Users\\User\\WebstormProjects\\Social-Network-on-React\\src\\API\\usersAPI.ts",[],{"ruleId":"206","replacedBy":"207"},{"ruleId":"208","replacedBy":"209"},{"ruleId":"206","replacedBy":"207"},{"ruleId":"208","replacedBy":"209"},{"ruleId":"210","severity":1,"message":"211","line":22,"column":8,"nodeType":"212","endLine":22,"endColumn":19,"suggestions":"213"},{"ruleId":"210","severity":1,"message":"214","line":25,"column":8,"nodeType":"212","endLine":25,"endColumn":10,"suggestions":"215"},{"ruleId":"210","severity":1,"message":"216","line":57,"column":8,"nodeType":"212","endLine":57,"endColumn":18,"suggestions":"217"},{"ruleId":"218","severity":1,"message":"219","line":70,"column":13,"nodeType":"220","endLine":70,"endColumn":61},{"ruleId":"221","severity":1,"message":"222","line":31,"column":67,"nodeType":"223","messageId":"224","endLine":31,"endColumn":69},{"ruleId":"221","severity":1,"message":"225","line":44,"column":70,"nodeType":"223","messageId":"224","endLine":44,"endColumn":72},{"ruleId":"210","severity":1,"message":"226","line":48,"column":8,"nodeType":"212","endLine":48,"endColumn":10,"suggestions":"227"},{"ruleId":"210","severity":1,"message":"228","line":61,"column":8,"nodeType":"212","endLine":61,"endColumn":29,"suggestions":"229"},{"ruleId":"230","severity":1,"message":"231","line":23,"column":34,"nodeType":"232","messageId":"233","endLine":23,"endColumn":36},{"ruleId":"221","severity":1,"message":"225","line":31,"column":54,"nodeType":"223","messageId":"224","endLine":31,"endColumn":56},{"ruleId":"234","severity":1,"message":"235","line":17,"column":37,"nodeType":"223","messageId":"236","endLine":17,"endColumn":38},{"ruleId":"218","severity":1,"message":"219","line":42,"column":17,"nodeType":"220","endLine":42,"endColumn":91},{"ruleId":"218","severity":1,"message":"219","line":16,"column":13,"nodeType":"220","endLine":16,"endColumn":38},{"ruleId":"230","severity":1,"message":"237","line":2,"column":8,"nodeType":"232","messageId":"233","endLine":2,"endColumn":12},{"ruleId":"230","severity":1,"message":"238","line":4,"column":9,"nodeType":"232","messageId":"233","endLine":4,"endColumn":27},{"ruleId":"230","severity":1,"message":"239","line":8,"column":9,"nodeType":"232","messageId":"233","endLine":8,"endColumn":23},"no-native-reassign",["240"],"no-negated-in-lhs",["241"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'refreshProfile'. Either include it or remove the dependency array.","ArrayExpression",["242"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["243"],"React Hook useEffect has a missing dependency: 'isAutoScroll'. Either include it or remove the dependency array.",["244"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","React Hook useEffect has missing dependencies: 'currentPage', 'dispatch', 'filter', 'history.location.search', and 'pageSize'. Either include them or remove the dependency array.",["245"],"React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["246"],"@typescript-eslint/no-unused-vars","'RC' is defined but never used.","Identifier","unusedVar","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'Post' is defined but never used.","'PostFormValuesType' is defined but never used.","'getUserProfile' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"247","fix":"248"},{"desc":"249","fix":"250"},{"desc":"251","fix":"252"},{"desc":"253","fix":"254"},{"desc":"255","fix":"256"},"Update the dependencies array to be: [newUserId, refreshProfile]",{"range":"257","text":"258"},"Update the dependencies array to be: [dispatch]",{"range":"259","text":"260"},"Update the dependencies array to be: [isAutoScroll, messages]",{"range":"261","text":"262"},"Update the dependencies array to be: [currentPage, dispatch, filter, history.location.search, pageSize]",{"range":"263","text":"264"},"Update the dependencies array to be: [filter, currentPage, history]",{"range":"265","text":"266"},[674,685],"[newUserId, refreshProfile]",[741,743],"[dispatch]",[1681,1691],"[isAutoScroll, messages]",[1775,1777],"[currentPage, dispatch, filter, history.location.search, pageSize]",[2170,2191],"[filter, currentPage, history]"]