[{"/Users/lev/WebstormProjects/Social-Network-on-React/src/index.tsx":"1","/Users/lev/WebstormProjects/Social-Network-on-React/src/reportWebVitals.js":"2","/Users/lev/WebstormProjects/Social-Network-on-React/src/App.tsx":"3","/Users/lev/WebstormProjects/Social-Network-on-React/src/redux/appReducer.ts":"4","/Users/lev/WebstormProjects/Social-Network-on-React/src/redux/reduxStore.ts":"5","/Users/lev/WebstormProjects/Social-Network-on-React/src/hoc/withSuspense.tsx":"6","/Users/lev/WebstormProjects/Social-Network-on-React/src/components/News/News.tsx":"7","/Users/lev/WebstormProjects/Social-Network-on-React/src/components/Header/AppHeader.tsx":"8","/Users/lev/WebstormProjects/Social-Network-on-React/src/components/Settings/Settings.tsx":"9","/Users/lev/WebstormProjects/Social-Network-on-React/src/components/Music/Music.tsx":"10","/Users/lev/WebstormProjects/Social-Network-on-React/src/components/Profile/ProfileContainer.tsx":"11","/Users/lev/WebstormProjects/Social-Network-on-React/src/components/Users/UsersPage.tsx":"12","/Users/lev/WebstormProjects/Social-Network-on-React/src/components/Dialogs/DialogsContainer.tsx":"13","/Users/lev/WebstormProjects/Social-Network-on-React/src/components/Login/Login.tsx":"14","/Users/lev/WebstormProjects/Social-Network-on-React/src/components/common/Preloader/Preloader.tsx":"15","/Users/lev/WebstormProjects/Social-Network-on-React/src/pages/Chat/ChatPage.tsx":"16","/Users/lev/WebstormProjects/Social-Network-on-React/src/redux/authReducer.ts":"17","/Users/lev/WebstormProjects/Social-Network-on-React/src/redux/profileReducer.ts":"18","/Users/lev/WebstormProjects/Social-Network-on-React/src/redux/dialogsReducer.ts":"19","/Users/lev/WebstormProjects/Social-Network-on-React/src/redux/sidebarReducer.ts":"20","/Users/lev/WebstormProjects/Social-Network-on-React/src/redux/usersReducer.ts":"21","/Users/lev/WebstormProjects/Social-Network-on-React/src/redux/chatReducer.ts":"22","/Users/lev/WebstormProjects/Social-Network-on-React/src/redux/usersSelectors.ts":"23","/Users/lev/WebstormProjects/Social-Network-on-React/src/components/Profile/Profile.tsx":"24","/Users/lev/WebstormProjects/Social-Network-on-React/src/components/Login/LoginForm.tsx":"25","/Users/lev/WebstormProjects/Social-Network-on-React/src/hoc/withAuthRedirect.tsx":"26","/Users/lev/WebstormProjects/Social-Network-on-React/src/components/Dialogs/Dialogs.tsx":"27","/Users/lev/WebstormProjects/Social-Network-on-React/src/components/Users/Users.tsx":"28","/Users/lev/WebstormProjects/Social-Network-on-React/src/API/api.ts":"29","/Users/lev/WebstormProjects/Social-Network-on-React/src/API/profileAPI.ts":"30","/Users/lev/WebstormProjects/Social-Network-on-React/src/API/authAPI.ts":"31","/Users/lev/WebstormProjects/Social-Network-on-React/src/API/usersAPI.ts":"32","/Users/lev/WebstormProjects/Social-Network-on-React/src/API/chatAPI.ts":"33","/Users/lev/WebstormProjects/Social-Network-on-React/src/utils/validators/validators.ts":"34","/Users/lev/WebstormProjects/Social-Network-on-React/src/components/Users/UsersSearchForm.tsx":"35","/Users/lev/WebstormProjects/Social-Network-on-React/src/components/Users/User.tsx":"36","/Users/lev/WebstormProjects/Social-Network-on-React/src/components/common/FormsControls/FormsControls.tsx":"37","/Users/lev/WebstormProjects/Social-Network-on-React/src/components/Dialogs/Message/MessageItem.tsx":"38","/Users/lev/WebstormProjects/Social-Network-on-React/src/components/Profile/MyPosts/MyPosts.tsx":"39","/Users/lev/WebstormProjects/Social-Network-on-React/src/components/Dialogs/DialogItem/DialogItem.tsx":"40","/Users/lev/WebstormProjects/Social-Network-on-React/src/components/Profile/ProfileInfo/ProfileInfo.tsx":"41","/Users/lev/WebstormProjects/Social-Network-on-React/src/components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx":"42"},{"size":494,"mtime":1622661080243,"results":"43","hashOfConfig":"44"},{"size":362,"mtime":1622661080244,"results":"45","hashOfConfig":"44"},{"size":6457,"mtime":1623262667177,"results":"46","hashOfConfig":"44"},{"size":913,"mtime":1622661080243,"results":"47","hashOfConfig":"44"},{"size":1301,"mtime":1623182618727,"results":"48","hashOfConfig":"44"},{"size":313,"mtime":1623263449103,"results":"49","hashOfConfig":"44"},{"size":138,"mtime":1622661080240,"results":"50","hashOfConfig":"44"},{"size":1932,"mtime":1623356073774,"results":"51","hashOfConfig":"44"},{"size":160,"mtime":1622661080242,"results":"52","hashOfConfig":"44"},{"size":151,"mtime":1622661080240,"results":"53","hashOfConfig":"44"},{"size":1286,"mtime":1623357174818,"results":"54","hashOfConfig":"44"},{"size":427,"mtime":1623262237664,"results":"55","hashOfConfig":"44"},{"size":571,"mtime":1622661080239,"results":"56","hashOfConfig":"44"},{"size":846,"mtime":1622661080239,"results":"57","hashOfConfig":"44"},{"size":288,"mtime":1622661080243,"results":"58","hashOfConfig":"44"},{"size":3743,"mtime":1623356059107,"results":"59","hashOfConfig":"44"},{"size":2295,"mtime":1623355509470,"results":"60","hashOfConfig":"44"},{"size":3248,"mtime":1623355083073,"results":"61","hashOfConfig":"44"},{"size":2051,"mtime":1622661080244,"results":"62","hashOfConfig":"44"},{"size":904,"mtime":1622661080244,"results":"63","hashOfConfig":"44"},{"size":4760,"mtime":1622907828463,"results":"64","hashOfConfig":"44"},{"size":2817,"mtime":1623253580084,"results":"65","hashOfConfig":"44"},{"size":1607,"mtime":1622661080244,"results":"66","hashOfConfig":"44"},{"size":382,"mtime":1623359683237,"results":"67","hashOfConfig":"44"},{"size":1253,"mtime":1622661080239,"results":"68","hashOfConfig":"44"},{"size":890,"mtime":1622661080243,"results":"69","hashOfConfig":"44"},{"size":2096,"mtime":1622661080239,"results":"70","hashOfConfig":"44"},{"size":3866,"mtime":1622925670427,"results":"71","hashOfConfig":"44"},{"size":583,"mtime":1622661080238,"results":"72","hashOfConfig":"44"},{"size":1014,"mtime":1622661080238,"results":"73","hashOfConfig":"44"},{"size":705,"mtime":1622661080238,"results":"74","hashOfConfig":"44"},{"size":692,"mtime":1622907660205,"results":"75","hashOfConfig":"44"},{"size":2614,"mtime":1623253580084,"results":"76","hashOfConfig":"44"},{"size":386,"mtime":1622661080245,"results":"77","hashOfConfig":"44"},{"size":2206,"mtime":1622910486567,"results":"78","hashOfConfig":"44"},{"size":1470,"mtime":1623010799711,"results":"79","hashOfConfig":"44"},{"size":1610,"mtime":1622661080243,"results":"80","hashOfConfig":"44"},{"size":260,"mtime":1622661080239,"results":"81","hashOfConfig":"44"},{"size":4666,"mtime":1623359822854,"results":"82","hashOfConfig":"44"},{"size":511,"mtime":1622661080239,"results":"83","hashOfConfig":"44"},{"size":4273,"mtime":1623359822850,"results":"84","hashOfConfig":"44"},{"size":1064,"mtime":1622973468822,"results":"85","hashOfConfig":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},"1f0s98q",{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"88"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"88"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"88"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"88"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"88"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"88"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"88"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"88"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},"/Users/lev/WebstormProjects/Social-Network-on-React/src/index.tsx",[],["182","183"],"/Users/lev/WebstormProjects/Social-Network-on-React/src/reportWebVitals.js",[],["184","185"],"/Users/lev/WebstormProjects/Social-Network-on-React/src/App.tsx",["186"],"import \"./App.css\"\nimport React from \"react\"\nimport News from \"./components/News/News\"\nimport Music from \"./components/Music/Music\"\nimport Settings from \"./components/Settings/Settings\"\nimport { BrowserRouter, Link, NavLink, Redirect, Route, Switch, withRouter } from \"react-router-dom\"\nimport { connect, Provider } from \"react-redux\"\nimport { compose } from \"redux\"\nimport { initializeApp } from \"./redux/appReducer\"\nimport Preloader from \"./components/common/Preloader/Preloader\"\nimport store, { AppStateType } from \"./redux/reduxStore\"\nimport { withSuspense } from \"./hoc/withSuspense\"\nimport {Breadcrumb, Layout, Menu, Spin} from \"antd\"\nimport { LaptopOutlined, NotificationOutlined, UserOutlined } from \"@ant-design/icons\"\nimport classes from \"./components/Navbar/Navbar.module.css\"\nimport AppHeader from \"./components/Header/AppHeader\"\nimport \"antd/dist/antd.css\"\n\nconst { SubMenu } = Menu\nconst { Content, Footer, Sider } = Layout\n\nconst DialogsContainer = React.lazy(() => import(\"./components/Dialogs/DialogsContainer\"))\nconst ProfileContainer = React.lazy(() => import(\"./components/Profile/ProfileContainer\"))\nconst UsersPage = React.lazy(() => import(\"./components/Users/UsersPage\"))\nconst Login = React.lazy(() => import(\"./components/Login/Login\"))\nconst ChatPage = React.lazy(() => import(\"./pages/Chat/ChatPage\"))\n\ntype MapPropsType = ReturnType<typeof mapStateToProps>\ntype DispatchPropsType = {\n    initializeApp: () => void\n}\n\nclass App extends React.Component<MapPropsType & DispatchPropsType> {\n    componentDidMount() {\n        this.props.initializeApp()\n    }\n\n    render() {\n        // if (!this.props.initialized) {\n        //     return <Preloader/>\n        // }\n\n        return (\n            <Spin style={{position: \"fixed\", maxHeight: \"none\"}} spinning={!this.props.initialized}>\n            <Layout style={{ minHeight: \"100vh\" }}>\n                <AppHeader/>\n                <Content style={{ padding: \"0 50px\" }}>\n                    <Breadcrumb style={{ margin: \"16px 0\" }}>\n                        <Breadcrumb.Item>Home</Breadcrumb.Item>\n                        <Breadcrumb.Item>List</Breadcrumb.Item>\n                        <Breadcrumb.Item>App</Breadcrumb.Item>\n                    </Breadcrumb>\n                    <Layout className=\"site-layout-background\">\n                        <Sider className=\"site-layout-background\" width={200} style={{ alignSelf: 'flex-start'}}>\n                            <Menu\n                                mode=\"inline\"\n                                defaultSelectedKeys={[\"1\"]}\n                                defaultOpenKeys={[\"sub1\"]}\n                            >\n                                <SubMenu key=\"sub1\" icon={<UserOutlined/>} title=\"Profile\">\n                                    <Menu.Item key=\"1\">\n                                        <Link to=\"/profile\">Profile</Link>\n                                    </Menu.Item>\n                                    <Menu.Item key=\"2\">\n                                        <Link to=\"/dialogs\">Messages</Link>\n                                    </Menu.Item>\n                                    <Menu.Item key=\"3\">\n                                        <Link to=\"/users\">DEVELOPERS</Link>\n                                    </Menu.Item>\n                                </SubMenu>\n                                <SubMenu key=\"sub2\" icon={<LaptopOutlined/>} title=\"Other\">\n                                    <Menu.Item key=\"5\">\n                                        <Link to=\"/news\">News</Link>\n                                    </Menu.Item>\n                                    <Menu.Item key=\"6\">\n                                        <Link to=\"/chat\">Chat</Link>\n                                    </Menu.Item>\n                                    <Menu.Item key=\"7\">\n                                        <Link to=\"/music\">Music</Link>\n                                    </Menu.Item>\n                                </SubMenu>\n                                <SubMenu key=\"sub3\" icon={<NotificationOutlined/>} title=\"Settings\">\n                                    <Menu.Item key=\"9\">\n                                        <NavLink to=\"/settings\" activeClassName={classes.activeLink}>Settings</NavLink>\n                                    </Menu.Item>\n                                </SubMenu>\n                            </Menu>\n                        </Sider>\n                        <Content style={{ padding: \"0 24px\", minHeight: 280 }}>\n                            <Switch>\n                                <Route path=\"/\" exact><Redirect to=\"/profile\"/></Route>\n                                <Route path=\"/profile/:userId?\">\n                                    {withSuspense(ProfileContainer)}\n                                </Route>\n                                <Route path=\"/dialogs\">\n                                    {withSuspense(DialogsContainer)}\n                                </Route>\n                                <Route path=\"/users\">\n                                    {withSuspense(UsersPage)}\n                                </Route>\n                                <Route path=\"/news\" render={() => <News/>}/>\n                                <Route path=\"/music\" render={() => <Music/>}/>\n                                <Route path=\"/settings\" render={() => <Settings/>}/>\n                                <Route path=\"/login\">\n                                    {withSuspense(Login)}\n                                </Route>\n                                <Route path=\"/chat\">\n                                    {withSuspense(ChatPage)}\n                                </Route>\n                                <Route path=\"*\" render={() => <div>404 NOT FOUND</div>}/>\n                            </Switch>\n                        </Content>\n                    </Layout>\n                </Content>\n                <Footer style={{ textAlign: \"center\" }}>Social network on React</Footer>\n            </Layout>\n            </Spin>\n        )\n    }\n}\n\nconst mapStateToProps = (state: AppStateType) => ({\n    initialized: state.app.initialized,\n})\n\nlet AppContainer = compose<React.ComponentType>(\n    withRouter,\n    connect(mapStateToProps, { initializeApp }))(App)\n\nconst SocialNetworkApp: React.FC = () => {\n    return <BrowserRouter>\n        <Provider store={store}>\n            <AppContainer/>\n        </Provider>\n    </BrowserRouter>\n}\n\nexport default SocialNetworkApp","/Users/lev/WebstormProjects/Social-Network-on-React/src/redux/appReducer.ts",[],"/Users/lev/WebstormProjects/Social-Network-on-React/src/redux/reduxStore.ts",[],"/Users/lev/WebstormProjects/Social-Network-on-React/src/hoc/withSuspense.tsx",[],"/Users/lev/WebstormProjects/Social-Network-on-React/src/components/News/News.tsx",[],"/Users/lev/WebstormProjects/Social-Network-on-React/src/components/Header/AppHeader.tsx",[],"/Users/lev/WebstormProjects/Social-Network-on-React/src/components/Settings/Settings.tsx",[],"/Users/lev/WebstormProjects/Social-Network-on-React/src/components/Music/Music.tsx",[],"/Users/lev/WebstormProjects/Social-Network-on-React/src/components/Profile/ProfileContainer.tsx",["187"],"/Users/lev/WebstormProjects/Social-Network-on-React/src/components/Users/UsersPage.tsx",[],"/Users/lev/WebstormProjects/Social-Network-on-React/src/components/Dialogs/DialogsContainer.tsx",[],"/Users/lev/WebstormProjects/Social-Network-on-React/src/components/Login/Login.tsx",[],"/Users/lev/WebstormProjects/Social-Network-on-React/src/components/common/Preloader/Preloader.tsx",[],["188","189"],"/Users/lev/WebstormProjects/Social-Network-on-React/src/pages/Chat/ChatPage.tsx",["190","191","192","193"],"/Users/lev/WebstormProjects/Social-Network-on-React/src/redux/authReducer.ts",[],"/Users/lev/WebstormProjects/Social-Network-on-React/src/redux/profileReducer.ts",["194"],"import {PhotosType, PostType, ProfileType} from \"../types/types\";\nimport {BaseThunkType, InferActionTypes} from \"./reduxStore\";\nimport {ProfileAPI} from \"../API/profileAPI\";\n\nlet initialState = {\n    posts: [\n        {id: 1, message: 'Hi, how are you?', likesCount: 105},\n        {id: 2, message: \"It's my first post\", likesCount: 10},\n        {id: 3, message: \"Lol\", likesCount: 5000},\n        {id: 4, message: \"Kek\", likesCount: 9400},\n    ] as Array<PostType>,\n    profile: null as ProfileType | null,\n    status: '',\n}\n\ntype ActionsTypes = ActionType\ntype profileReducerType = typeof initialState\n\nconst profileReducer = (state = initialState, action: ActionsTypes): profileReducerType => {\n    switch (action.type) {\n        case \"ADD_POST\":\n            return {\n                ...state,\n                posts: [{id: state.posts.length + 1, message: action.newPostText, likesCount: 0}, ...state.posts]\n            };\n        case \"SET_USER_PROFILE\":\n            return {...state, profile: action.profile};\n        case \"SET_STATUS\":\n            return {...state, status: action.status};\n        case \"DELETE_POST\":\n            return {...state, posts: state.posts.filter(p => p.id != action.postId)}\n        case \"SAVE_PHOTO_SUCCESS\":\n            return {...state, profile: {...state.profile, photos: action.photos} as ProfileType}\n        default:\n            return state;\n    }\n}\n\nexport default profileReducer;\n\ntype ActionType = InferActionTypes<typeof actions>\n\nexport const actions = {\n    addPost: (newPostText: string) => ({type: \"ADD_POST\", newPostText} as const),\n    setUsersProfile: (profile: ProfileType | null) => ({type: \"SET_USER_PROFILE\", profile} as const),\n    setStatus: (status: string) => ({type: \"SET_STATUS\", status} as const),\n    deletePost: (postId: number) => ({type: \"DELETE_POST\", postId} as const),\n    savePhotoSuccess: (photos: PhotosType) => ({type: \"SAVE_PHOTO_SUCCESS\", photos} as const),\n}\n\n\ntype ThunkType = BaseThunkType<ActionsTypes>\n\nexport const getUserProfile = (userId: number): ThunkType => async (dispatch) => {\n    const response = await ProfileAPI.getUserProfile(userId)\n    dispatch(actions.setUsersProfile(response))\n}\n\nexport const getStatus = (userId: number): ThunkType => async (dispatch) => {\n    const response = await ProfileAPI.getStatus(userId)\n    dispatch(actions.setStatus(response))\n}\n\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\n    const response = await ProfileAPI.updateStatus(status)\n    if (response.resultCode !== 0) return\n    dispatch(actions.setStatus(status))\n}\n\nexport const savePhoto = (file: File): ThunkType => async (dispatch) => {\n    const response = await ProfileAPI.savePhoto(file)\n    if (response.resultCode !== 0) return\n\n    dispatch(actions.savePhotoSuccess(response.data.photos))\n}","/Users/lev/WebstormProjects/Social-Network-on-React/src/redux/dialogsReducer.ts",[],"/Users/lev/WebstormProjects/Social-Network-on-React/src/redux/sidebarReducer.ts",[],"/Users/lev/WebstormProjects/Social-Network-on-React/src/redux/usersReducer.ts",[],"/Users/lev/WebstormProjects/Social-Network-on-React/src/redux/chatReducer.ts",["195"],"import { BaseThunkType, InferActionTypes } from \"./reduxStore\"\nimport { chatAPI, ChatMessageAPIType, StatusType } from \"../API/chatAPI\"\nimport { FormAction } from \"redux-form\"\nimport { Dispatch } from \"redux\"\nimport { v1 } from \"uuid\"\n\ntype ChatMessageType = ChatMessageAPIType & {id: string}\n\nlet initialState = {\n    messages: [] as ChatMessageType[],\n    status: \"pending\" as StatusType,\n}\n\ntype chatReducerTypes = typeof initialState\ntype ActionsTypes = ActionTypes\n\nconst chatReducer = (state = initialState, action: ActionsTypes): chatReducerTypes => {\n    switch (action.type) {\n        case \"MESSAGES_RECEIVED\":\n            return {\n                ...state,\n                messages: [\n                    ...state.messages,\n                    ...action.payload.messages.map(m => ({ ...m, id: v1() })),\n                ].filter((m, index, array) => index >= array.length - 100),\n            }\n        case \"STATUS_CHANGED\":\n            return {\n                ...state,\n                status: action.payload.status,\n            }\n        default:\n            return state\n    }\n}\n\nexport default chatReducer\n\ntype ActionTypes = InferActionTypes<typeof actions>\n\nexport const actions = {\n    messagesReceived: (messages: ChatMessageAPIType[]) => ({\n        type: \"MESSAGES_RECEIVED\",\n        payload: { messages },\n    } as const),\n    statusChanged: (status: StatusType) => ({\n        type: \"STATUS_CHANGED\",\n        payload: { status },\n    } as const),\n}\n\ntype ThunkType = BaseThunkType<ActionsTypes | FormAction>\n\nlet _newMessageHandler: ((message: ChatMessageAPIType[]) => void) | null = null\nconst newMessageHandlerCreator = (dispatch: Dispatch) => {\n    if (_newMessageHandler === null) {\n        _newMessageHandler = (message) => {\n            dispatch(actions.messagesReceived(message))\n        }\n    }\n\n    return _newMessageHandler\n}\n\nlet _statusChangedHandler: ((status: StatusType) => void) | null = null\nconst statusChangedHandlerCreator = (dispatch: Dispatch) => {\n    if (_statusChangedHandler === null) {\n        _statusChangedHandler = (status) => {\n            dispatch(actions.statusChanged(status))\n        }\n    }\n    return _statusChangedHandler\n}\n\nexport const startMessagesListening = (): ThunkType => async (dispatch) => {\n    chatAPI.start()\n    chatAPI.subscribe(\"messages-received\", newMessageHandlerCreator(dispatch))\n    chatAPI.subscribe(\"status-changed\", statusChangedHandlerCreator(dispatch))\n}\n\nexport const stopMessagesListening = (): ThunkType => async (dispatch) => {\n    chatAPI.unsubscribe(\"messages-received\", newMessageHandlerCreator(dispatch))\n    chatAPI.unsubscribe(\"status-changed\", statusChangedHandlerCreator(dispatch))\n    chatAPI.stop()\n}\n\nexport const sendMessage = (message: string): ThunkType => async (dispatch) => {\n    chatAPI.sendMessage(message)\n}\n","/Users/lev/WebstormProjects/Social-Network-on-React/src/redux/usersSelectors.ts",[],"/Users/lev/WebstormProjects/Social-Network-on-React/src/components/Profile/Profile.tsx",[],"/Users/lev/WebstormProjects/Social-Network-on-React/src/components/Login/LoginForm.tsx",[],"/Users/lev/WebstormProjects/Social-Network-on-React/src/hoc/withAuthRedirect.tsx",[],"/Users/lev/WebstormProjects/Social-Network-on-React/src/components/Dialogs/Dialogs.tsx",[],"/Users/lev/WebstormProjects/Social-Network-on-React/src/components/Users/Users.tsx",["196","197","198"],"import React, {CSSProperties, FC, useEffect} from 'react';\nimport {UserType} from \"../../types/types\";\nimport User from \"./User\";\nimport {FilterType, followUsers, requestUsers, unfollowUsers} from \"../../redux/usersReducer\"\nimport {UsersSearchForm} from \"./UsersSearchForm\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    getCurrentPage,\n    getFollowingInProgress,\n    getPageSize,\n    getTotalUsersCount,\n    getUsers,\n    getUsersFilter\n} from \"../../redux/usersSelectors\";\nimport {useHistory} from 'react-router-dom';\nimport * as queryString from \"querystring\";\nimport {Pagination} from \"antd\";\n\ntype PropsType = {}\n\nexport type QueryParamsType = { term?: string, page?: string, friend?: string };\nconst Users: React.FC<PropsType> = () => {\n\n    const totalUsersCount = useSelector(getTotalUsersCount)\n    const pageSize = useSelector(getPageSize)\n    const currentPage = useSelector(getCurrentPage)\n    const users = useSelector(getUsers)\n    const filter = useSelector(getUsersFilter)\n    const followingInProgress = useSelector(getFollowingInProgress)\n\n    const dispatch = useDispatch()\n    const history = useHistory()\n\n    useEffect(() => {\n        const parsed = queryString.parse(history.location.search.substr(1)) as QueryParamsType\n\n        let actualPage = currentPage\n        let actualFilter = filter\n\n        if (!!parsed.page) actualPage = Number(parsed.page)\n        if (!!parsed.term) actualFilter = {...actualFilter, term: parsed.term as string}\n        if (!!parsed.friend) actualFilter = {\n            ...actualFilter,\n            friend: parsed.friend === \"null\" ? null : (parsed.friend == 'true')\n        }\n\n        dispatch(requestUsers(actualPage, pageSize, actualFilter))\n    }, [])\n\n    useEffect(() => {\n        const query: QueryParamsType = {}\n\n        if (!!filter.term) query.term = filter.term\n        if (filter.friend !== null) query.friend = String(filter.friend)\n        if (currentPage !== 1) query.page = String(currentPage)\n\n        history.push({\n            pathname: \"/users\",\n            search: queryString.stringify(query)\n        })\n    }, [filter, currentPage])\n\n    const onPageChanged = (pageNumber: number) => {\n        if (pageNumber === currentPage) return\n        dispatch(requestUsers(pageNumber, pageSize, filter))\n    }\n\n    const onFilterChanged = (filter: FilterType) => {\n        dispatch(requestUsers(1, pageSize, filter))\n    }\n\n    const followUsersCb = (userId: number) => {\n        dispatch(followUsers(userId))\n    }\n\n    const unfollowUsersCb = (userId: number) => {\n        dispatch(unfollowUsers(userId))\n    }\n\n    const onShowSizeChange = (currentPage: number, pageSize: number) => {\n        dispatch(requestUsers(1, pageSize, filter));\n    };\n\n    const Paginator: FC<React.StyleHTMLAttributes<CSSProperties>> = (props) => (\n        <Pagination\n            style={props.style}\n            current={currentPage}\n            onShowSizeChange={onShowSizeChange}\n            total={totalUsersCount}\n            size={'small'}\n            pageSize={pageSize} onChange={onPageChanged}\n        />\n    )\n\n    return (\n        <div>\n            <UsersSearchForm onFilterChanged={onFilterChanged}/>\n            {users.length ?\n                <>\n                    <Paginator style={{marginBottom: 40, marginTop: 20}}/>\n                    {users.map((user: UserType) => (\n                        <User\n                            user={user} key={user.id}\n                            followUsers={followUsersCb}\n                            unfollowUsers={unfollowUsersCb}\n                            followingInProgress={followingInProgress}\n                        />\n                    ))}\n                    <Paginator style={{marginBottom: 40}}/>\n                </> :\n                <span>User undefined</span>\n            }\n        </div>\n    )\n}\n\n\nexport default Users;","/Users/lev/WebstormProjects/Social-Network-on-React/src/API/api.ts",["199"],"import axios from \"axios\";\nimport {UserType} from \"../types/types\";\n\nexport const instance = axios.create({\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n    withCredentials: true,\n    headers: {\n        \"API-KEY\": \"90e619dd-9c4c-4644-96ed-82ca9fccd865\",\n    }\n})\n\nexport enum ResultCodesEnum {\n    Success = 0,\n    Error = 1\n}\n\nexport type GetItemType = {\n    items: Array<UserType>\n    totalCount: number\n    error: string | null\n}\n\nexport type ResponseType<D = {}, RC = ResultCodesEnum> = {\n    data: D\n    messages: Array<string>\n    resultCode: ResultCodesEnum\n}","/Users/lev/WebstormProjects/Social-Network-on-React/src/API/profileAPI.ts",[],"/Users/lev/WebstormProjects/Social-Network-on-React/src/API/authAPI.ts",[],"/Users/lev/WebstormProjects/Social-Network-on-React/src/API/usersAPI.ts",[],"/Users/lev/WebstormProjects/Social-Network-on-React/src/API/chatAPI.ts",[],"/Users/lev/WebstormProjects/Social-Network-on-React/src/utils/validators/validators.ts",[],"/Users/lev/WebstormProjects/Social-Network-on-React/src/components/Users/UsersSearchForm.tsx",["200"],"import {FilterType} from \"../../redux/usersReducer\";\nimport React, {FC} from \"react\";\nimport {Form, Input, Select} from 'antd';\nimport {useHistory} from \"react-router-dom\";\nimport queryString from \"querystring\";\nimport {QueryParamsType} from \"./Users\";\n\nconst {Option} = Select;\n\ninterface FieldData {\n    name: string | number | (string | number)[];\n    value?: any;\n    touched?: boolean;\n    validating?: boolean;\n    errors?: string[];\n}\n\ntype UsersSearchFormPropsType = {\n    onFilterChanged: (filter: FilterType) => void\n}\nexport const UsersSearchForm: FC<UsersSearchFormPropsType> = ({onFilterChanged}) => {\n\n    const history = useHistory()\n    const parsed = queryString.parse(history.location.search.substr(1)) as QueryParamsType\n\n    const handleChange: (field: Array<FieldData>, fields: Array<FieldData>) => void = (_, form) => {\n        const term: string = form[0].value\n        const friend: string = form[1].value\n        const filter: FilterType = {\n            term: term,\n            friend: friend === \"all\" ? null : friend == \"true\"\n        }\n        onFilterChanged(filter)\n    }\n\n    return (\n        <div>\n            <Form onFieldsChange={handleChange}>\n                <Input.Group compact>\n                    <Form.Item\n                        name='term'\n                        noStyle\n                        rules={[{required: true, message: 'Street is required'}]}\n                        initialValue={parsed.term}\n                    >\n                        <Input style={{width: '75%'}} placeholder=\"Search\"/>\n                    </Form.Item>\n                    <Form.Item\n                        name='friend'\n                        noStyle\n                        rules={[{required: true}]}\n                        initialValue={parsed.friend || 'all'}\n                    >\n                        <Select placeholder=\"All\">\n                            <Option value=\"all\">All</Option>\n                            <Option value=\"true\">Followed</Option>\n                            <Option value=\"false\">Unfollowed</Option>\n                        </Select>\n                    </Form.Item>\n                </Input.Group>\n            </Form>\n        </div>\n    )\n}","/Users/lev/WebstormProjects/Social-Network-on-React/src/components/Users/User.tsx",["201"],"import React from \"react\";\nimport {NavLink} from \"react-router-dom\";\nimport {UserType} from \"../../types/types\";\nimport {Avatar, Button, Col, Divider, Image, Row} from \"antd\";\nimport {UserOutlined} from \"@ant-design/icons\";\n\nexport type UserPropsType = {\n    user: UserType\n    followingInProgress: Array<number>\n    unfollowUsers: (userId: number) => void\n    followUsers: (userId: number) => void\n}\n\nconst User: React.FC<UserPropsType> = ({followUsers, followingInProgress, unfollowUsers, user}) => (\n    <Row key={user.id}>\n        <Col span={3}>\n            <NavLink to={'/profile' + `/${user.id}`}>\n                {user.photos.small == null ?\n                    <Avatar size={80} icon={<UserOutlined/>}/> :\n                    <Avatar size={80} src={<Image src={user.photos.small}/>}/>\n                }\n            </NavLink>\n        </Col>\n        <Col span={17}>\n            <div>{user.name}</div>\n            <div>{user.status}</div>\n            <div>Country, City</div>\n        </Col>\n        <Col span={2} offset={2}>\n            {user.followed\n                ? <Button disabled={followingInProgress.some(id => id === user.id)}\n                          onClick={() => unfollowUsers(user.id)}>Unfollow</Button>\n\n                : <Button disabled={followingInProgress.some(id => id === user.id)}\n                          onClick={() => followUsers(user.id)}>Follow</Button>\n            }\n        </Col>\n        <Divider/>\n    </Row>\n)\n\nexport default User","/Users/lev/WebstormProjects/Social-Network-on-React/src/components/common/FormsControls/FormsControls.tsx",[],"/Users/lev/WebstormProjects/Social-Network-on-React/src/components/Dialogs/Message/MessageItem.tsx",[],"/Users/lev/WebstormProjects/Social-Network-on-React/src/components/Profile/MyPosts/MyPosts.tsx",["202"],"import React, {createElement, FC, useState} from 'react';\nimport {Avatar, Button, Comment, Form, Input, List, Tooltip} from 'antd';\nimport moment from 'moment';\nimport {useSelector} from \"react-redux\";\nimport {AppStateType} from \"../../../redux/reduxStore\";\nimport {DislikeOutlined, LikeOutlined, DislikeFilled, LikeFilled, UserOutlined} from '@ant-design/icons';\n\nconst {TextArea} = Input;\n\ntype PropsType = {\n    isOwner: boolean\n}\n\ninterface PersonProps {\n    author: string\n    avatar: string\n    content: React.ReactElement\n    datetime: string,\n}\n\ntype EditorType = {\n    onChange: (e: { target: HTMLTextAreaElement }) => void\n    onSubmit: () => void\n    submitting: boolean\n    value: string\n    isDisabled?: boolean\n    text: string\n}\n\ntype CommentListType = {\n    comments: Array<PersonProps>\n}\n\nconst MyPosts: React.FC<PropsType> = React.memo(({isOwner}) => {\n\n    // const postsElements = posts.map((p) => <Post message={p.message} likesCount={p.likesCount}\n    //                                              key={p.id}/>);\n    // const addNewPost = (values: PostFormValuesType) => {\n    //     addPost(values.newPost)\n    // };\n\n    const fullName = useSelector((state: AppStateType) => state.profilePage.profile?.fullName)\n    const photo = useSelector((state: AppStateType) => isOwner ? state.profilePage.ownProfile?.photos.small : state.profilePage.profile?.photos.small)\n\n    const [comments, setComments] = useState<Array<PersonProps> | []>([])\n    const [value, setValue] = useState('')\n    const [submitting, setSubmitting] = useState(false)\n\n    const handleSubmit = () => {\n        if (!value) {\n            return;\n        }\n\n        setSubmitting(true)\n\n        setTimeout(() => {\n            setSubmitting(false)\n            setComments((prev) => [\n                {\n                    author: fullName || '',\n                    avatar: photo || '',\n                    content: <p>{value}</p>,\n                    datetime: moment().fromNow(),\n                },\n                ...prev,\n\n            ])\n        }, 1000);\n        setValue('')\n    }\n\n    const handleChange = (e: { target: HTMLTextAreaElement }) => {\n        setValue(e.target.value)\n    };\n\n    return (\n        <>\n            <Comment\n                avatar={\n                    <Avatar\n                        src={photo}\n                        icon={<UserOutlined />}\n                        alt={fullName}\n                    />\n                }\n                content={\n                    <Editor\n                        onChange={handleChange}\n                        onSubmit={handleSubmit}\n                        submitting={submitting}\n                        value={value}\n                        text={'Add comment'}\n                    />\n                }\n            />\n            {comments.length > 0 && <CommentList comments={comments}/>}\n        </>\n    );\n});\n\nexport default MyPosts;\n\nconst CommentList: FC<CommentListType> = ({comments}) => {\n\n    const [likes, setLikes] = useState(0);\n    const [dislikes, setDislikes] = useState(0);\n    const [action, setAction] = useState<'liked' | 'disliked' | null>(null);\n\n    const like = () => {\n        setLikes(1);\n        setDislikes(0);\n        setAction('liked');\n    };\n\n    const dislike = () => {\n        setLikes(0);\n        setDislikes(1);\n        setAction('disliked');\n    };\n\n    const actions = [\n        <Tooltip key=\"comment-basic-like\" title=\"Like\">\n      <span onClick={like}>\n        {createElement(action === 'liked' ? LikeFilled : LikeOutlined)}\n          <span className=\"comment-action\">{likes}</span>\n      </span>\n        </Tooltip>,\n        <Tooltip key=\"comment-basic-dislike\" title=\"Dislike\">\n      <span onClick={dislike}>\n        {React.createElement(action === 'disliked' ? DislikeFilled : DislikeOutlined)}\n          <span className=\"comment-action\">{dislikes}</span>\n      </span>\n        </Tooltip>,\n        <span key=\"comment-basic-reply-to\">Reply to</span>,\n    ];\n\n    return (\n        <List\n        dataSource={comments}\n        header={`${comments.length} ${comments.length > 1 ? 'replies' : 'reply'}`}\n        itemLayout=\"horizontal\"\n        renderItem={props => <Comment actions={actions} {...props} />}\n    />\n    )\n};\n\nexport const Editor: FC<EditorType> = ({onChange, onSubmit, submitting, value, isDisabled = false, text}) => (\n    <>\n        <Form.Item>\n            <TextArea rows={2} onChange={onChange} value={value}/>\n        </Form.Item>\n        <Form.Item>\n            <Button htmlType=\"submit\" loading={submitting} onClick={onSubmit} disabled={isDisabled} type=\"primary\">\n                {text}\n            </Button>\n        </Form.Item>\n    </>\n);","/Users/lev/WebstormProjects/Social-Network-on-React/src/components/Dialogs/DialogItem/DialogItem.tsx",["203"],"import React, {FC} from 'react';\nimport classes from './../Dialogs.module.css'\nimport {NavLink} from \"react-router-dom\";\n\ntype PropsType = {\n    avatar: string\n    name: string\n    id: number\n}\n\nconst DialogItem: FC<PropsType> = (props) => {\n    let path = '/dialogsElements/' + props.id;\n\n    return (\n        <div className={classes.dialog + ' ' + classes.active}>\n            <img src={props.avatar}/>\n            <NavLink to={path}>{props.name}</NavLink>\n        </div>\n    )\n}\n\n\n\nexport default DialogItem;","/Users/lev/WebstormProjects/Social-Network-on-React/src/components/Profile/ProfileInfo/ProfileInfo.tsx",["204","205"],"/Users/lev/WebstormProjects/Social-Network-on-React/src/components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx",[],{"ruleId":"206","replacedBy":"207"},{"ruleId":"208","replacedBy":"209"},{"ruleId":"206","replacedBy":"207"},{"ruleId":"208","replacedBy":"209"},{"ruleId":"210","severity":1,"message":"211","line":10,"column":8,"nodeType":"212","messageId":"213","endLine":10,"endColumn":17},{"ruleId":"214","severity":1,"message":"215","line":22,"column":8,"nodeType":"216","endLine":22,"endColumn":19,"suggestions":"217"},{"ruleId":"206","replacedBy":"218"},{"ruleId":"208","replacedBy":"219"},{"ruleId":"214","severity":1,"message":"220","line":21,"column":8,"nodeType":"216","endLine":21,"endColumn":10,"suggestions":"221"},{"ruleId":"214","severity":1,"message":"222","line":55,"column":8,"nodeType":"216","endLine":55,"endColumn":18,"suggestions":"223"},{"ruleId":"224","severity":1,"message":"225","line":68,"column":37,"nodeType":"226","messageId":"227","endLine":68,"endColumn":38},{"ruleId":"224","severity":1,"message":"225","line":73,"column":37,"nodeType":"226","messageId":"227","endLine":73,"endColumn":38},{"ruleId":"228","severity":1,"message":"229","line":31,"column":67,"nodeType":"226","messageId":"230","endLine":31,"endColumn":69},{"ruleId":"210","severity":1,"message":"231","line":3,"column":21,"nodeType":"212","messageId":"213","endLine":3,"endColumn":31},{"ruleId":"228","severity":1,"message":"232","line":44,"column":70,"nodeType":"226","messageId":"230","endLine":44,"endColumn":72},{"ruleId":"214","severity":1,"message":"233","line":48,"column":8,"nodeType":"216","endLine":48,"endColumn":10,"suggestions":"234"},{"ruleId":"214","severity":1,"message":"235","line":61,"column":8,"nodeType":"216","endLine":61,"endColumn":29,"suggestions":"236"},{"ruleId":"210","severity":1,"message":"237","line":23,"column":34,"nodeType":"212","messageId":"213","endLine":23,"endColumn":36},{"ruleId":"228","severity":1,"message":"232","line":31,"column":54,"nodeType":"226","messageId":"230","endLine":31,"endColumn":56},{"ruleId":"224","severity":1,"message":"225","line":17,"column":37,"nodeType":"226","messageId":"227","endLine":17,"endColumn":38},{"ruleId":"210","severity":1,"message":"238","line":2,"column":9,"nodeType":"212","messageId":"213","endLine":2,"endColumn":17},{"ruleId":"239","severity":1,"message":"240","line":16,"column":13,"nodeType":"241","endLine":16,"endColumn":38},{"ruleId":"210","severity":1,"message":"242","line":3,"column":8,"nodeType":"212","messageId":"213","endLine":3,"endColumn":17},{"ruleId":"239","severity":1,"message":"240","line":60,"column":23,"nodeType":"241","endLine":60,"endColumn":84},"no-native-reassign",["243"],"no-negated-in-lhs",["244"],"@typescript-eslint/no-unused-vars","'Preloader' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'refreshProfile'. Either include it or remove the dependency array.","ArrayExpression",["245"],["243"],["244"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["246"],"React Hook useEffect has a missing dependency: 'isAutoScroll'. Either include it or remove the dependency array.",["247"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","eqeqeq","Expected '!==' and instead saw '!='.","unexpected","'stopSubmit' is defined but never used.","Expected '===' and instead saw '=='.","React Hook useEffect has missing dependencies: 'currentPage', 'dispatch', 'filter', 'history.location.search', and 'pageSize'. Either include them or remove the dependency array.",["248"],"React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["249"],"'RC' is defined but never used.","'PostType' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'userPhoto' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"250","fix":"251"},{"desc":"252","fix":"253"},{"desc":"254","fix":"255"},{"desc":"256","fix":"257"},{"desc":"258","fix":"259"},"Update the dependencies array to be: [newUserId, refreshProfile]",{"range":"260","text":"261"},"Update the dependencies array to be: [dispatch]",{"range":"262","text":"263"},"Update the dependencies array to be: [isAutoScroll, messages]",{"range":"264","text":"265"},"Update the dependencies array to be: [currentPage, dispatch, filter, history.location.search, pageSize]",{"range":"266","text":"267"},"Update the dependencies array to be: [filter, currentPage, history]",{"range":"268","text":"269"},[662,673],"[newUserId, refreshProfile]",[809,811],"[dispatch]",[1844,1854],"[isAutoScroll, messages]",[1728,1730],"[currentPage, dispatch, filter, history.location.search, pageSize]",[2110,2131],"[filter, currentPage, history]"]